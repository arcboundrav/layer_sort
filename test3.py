from object_config import *

# Testing Continuous Effects Generated by Spell Abilities with Definite Durations

has_trample_predicate = HasKeywordAbility(keyword_ability_type=KWATrample)

# Scenario 1a #
# Alpha Myr enters the battlefield under p0's control, then Test Artifact does so.
alpha_myr = AlphaMyr(p0)
test_artifact = TestArtifact(p0)

ZH.zone_battlefield.add_object(alpha_myr)
ZH.zone_battlefield.add_object(test_artifact)

snapshot()
display([alpha_myr, test_artifact])

# Scenario 1a Outcome #
# Both permanents have their default characteristic values.
assert alpha_myr.power == 2
assert alpha_myr.toughness == 1
assert alpha_myr.abilities == []

assert test_artifact.power == test_artifact.toughness == 0
assert test_artifact.card_types == set(['artifact'])
assert test_artifact.abilities == []

# Scenario 1 #
# Overcome is resolved first, then Test Instant is resolved.
overcome = Overcome(p0)

# Resolve Overcome
resolve_effects(overcome)
# Apply Overcome
snapshot()
display([alpha_myr, test_artifact])

assert alpha_myr.power == 4
assert alpha_myr.toughness == 3
assert has_trample_predicate.value_test(alpha_myr)

assert test_artifact.power == test_artifact.toughness == 0
assert test_artifact.card_types == set(['artifact'])
assert test_artifact.abilities == []

test_instant = TestInstant(p0)

# Resolve Test Instant
resolve_effects(test_instant)

# Apply Test Instant
snapshot()
display([alpha_myr, test_artifact])

assert alpha_myr.power == 4
assert alpha_myr.toughness == 3
assert has_trample_predicate.value_test(alpha_myr)

assert test_artifact.power == test_artifact.toughness == 2
assert test_artifact.card_types == set(['artifact', 'creature'])
assert test_artifact.abilities == []

# Scenario 1 Outcome #
# Overcome grants +2/+2 and trample to Alpha Myr which was an artifact creature when it was applied.
#
# Test Instant turns Test Artifact into an 2/2 Artifact Creature afterward.
#
# Test Instant does not change Alpha Myr into a 6/5 because the power-and-toughness-setting
# effect applies only to the objects which were noncreature artifacts at the time it was applied.

# Cause the effects to expire.
EVENT_HANDLER.broadcast_event(UntilEndOfTurnEvent())
snapshot()
display([alpha_myr, test_artifact])

assert alpha_myr.power == 2
assert alpha_myr.toughness == 1
assert alpha_myr.abilities == []

assert test_artifact.power == test_artifact.toughness == 0
assert test_artifact.card_types == set(['artifact'])
assert test_artifact.abilities == []

# Expiration Outcome #
# Both Alpha Myr and Test Artifact revert to their base state

# Scenario 2 #
# Test Instant is resolved first, then Overcome is resolved.

# Resolve Test Instant
resolve_effects(test_instant)
snapshot()
display([alpha_myr, test_artifact])

assert alpha_myr.power == 2
assert alpha_myr.toughness == 1
assert alpha_myr.abilities == []

assert test_artifact.power == test_artifact.toughness == 2
assert test_artifact.card_types == set(['artifact', 'creature'])
assert test_artifact.abilities == []

# Resolve Overcome
resolve_effects(overcome)
snapshot()
display([alpha_myr, test_artifact])

assert alpha_myr.power == 4
assert alpha_myr.toughness == 3
assert has_trample_predicate.value_test(alpha_myr)

assert test_artifact.power == test_artifact.toughness == 4
assert test_artifact.card_types == set(['artifact', 'creature'])
assert has_trample_predicate.value_test(test_artifact)

# Scenario 2 Outcome #
# Test Instant turns Test Artifact into a 2/2 creature without changing Alpha Myr's
# base power and toughness.
#
# Overcome gives +2/+2 and trample to both Alpha Myr and Test Artifact, since Test Artifact
# is a creature by the time it is applied. 
