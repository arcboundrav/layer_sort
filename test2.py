from object_config import *

# Sephara + Alela + Frogify Example

sephara = Sephara(controller=p0)
alela = Alela(controller=p0)

has_flying_predicate = HasKeywordAbility(keyword_ability_type=KWAFlying)
has_indestructible_predicate = HasKeywordAbility(keyword_ability_type=KWAIndestructible)

# Scenario 1a #
# Sephara on the battlefield alone under the control of p0.
# Sephara has a static ability which reads,
# "Other creatures you control with flying gain indestructible."
ZH.zone_battlefield.add_object(sephara)
snapshot()
display([sephara])

# Scenario 1a Outcome #
# Sephara's power and toughness are their default values.
# Sephara has flying; and, does not grant itself indestructible.
assert sephara.power == sephara.toughness == 7
assert has_flying_predicate.value_test(sephara)
assert not(has_indestructible_predicate.value_test(sephara))


# Scenario 1b #
# Alela on the battlefield alone under the control of p0.
# Alela has a static ability which reads, "Other creatures you control with flying get +1/+0."
ZH.zone_battlefield.remove_specific_object_(sephara)
ZH.zone_battlefield.add_object(alela)
snapshot()
display([alela])

# Scenario 1b Outcome #
# Alela's power and toughness are their default values; and, does not give itself +1/+0.
# Alela has flying and does not have indestructible.
assert alela.power == 2
assert alela.toughness == 3
assert has_flying_predicate.value_test(alela)
assert not(has_indestructible_predicate.value_test(alela))

# Scenario 1c #
# Alela and Sephara on the battlefield together under the control of p0.
# There is no interaction between the effects generated by their respective static abilities,
# so the relative timestamp order between these two permanents doesn't matter.
ZH.zone_battlefield.add_object(sephara)
snapshot()
display([sephara, alela])

# Scenario 1c Outcome #
# Alela's static ability grants Sephara +1/+0, since Sephara has the same controller and
# also has flying. Alela's static ability does not grant Alela +1/+0.
# Sephara's static ability grants indestructible to Alela, since Alela has the same controller
# and also has flying. Sephara's static ability does not grant Sephara indestructible.
assert sephara.power == 8
assert sephara.toughness == 7
assert alela.power == 2
assert alela.toughness == 3

assert has_indestructible_predicate.value_test(alela)
assert not(has_indestructible_predicate.value_test(sephara))

assert alela.color == set(['blue', 'black', 'white'])
assert alela.card_types == set(['creature'])
assert alela.subtypes == set(['warlock', 'faerie'])

# Scenario 1d #
# p0's opponent plays Frogify, and enchants Alela.
# Frogify has a static ability which generates an effect to apply to the creature
# Frogify enchants, which reads,
# "Enchanted creature loses all abilities and is a blue Frog creature with
#  base power and toughness 1/1 (It loses all other card types and creature types)."
frogify = Frogify(controller=p1)
frogify.enchanted_object = alela
ZH.zone_battlefield.add_object(frogify)

# Scenario 1d Outcome #
# Alela's only card type is creature. Alela's only subtype is frog, as opposed to the
# default value of warlock faerie. Alela's only color is blue, as opposed to the default value
# of white, blue, and black. Alela has power and toughness 1/1 rather than the default values
# of 2/3. All of Alela's abilities are lost. This final change means that Sephara's power and
# toughness will no longer be modified by Alela's static ability; although it has an earlier
# timestamp than Frogify, by the time layer 7 effects are applied, the ability will have already
# been removed in layer 6, and will therefore no longer exist.
#
# Sephara's effect depends on whether or not Frogify's effect is applied first, but Frogify's
# effect does not depend on Sephara's effect. If Sephara's effect is applied first, it sees
# Alela has flying and grants Alela indestructible. Frogify then removes all of Alela's abilities.
# If Frogify is applied first, Sephara's effect will no longer apply to Alela, because Alela will
# no longer qualify, having lost flying. On the other hand, the impact Frogify has on the state
# is the same whether or not Sephara's effect is applied---Alela ends up without any abilities.
# Therefore, although Sephara's effect has an earlier timestamp than Frogify's effect, it will
# wait until Frogify is applied, at which point, it will do nothing, since it doesn't apply to
# anything on the battlefield (as above, it does not apply to Sephara).
snapshot()
display([sephara, alela])

assert alela.card_types == set(['creature'])
assert alela.subtypes == set(['frog'])
assert alela.color == set(['blue'])
assert alela.abilities == []
assert alela.power == alela.toughness == 1

assert has_flying_predicate.value_test(sephara)
assert not(has_indestructible_predicate.value_test(sephara))
assert sephara.power == sephara.toughness == 7


#test_dict = {}
#for component in FX_HANDLER.used_components:
#    print("{} from {}".format(component, component.reference_effect.reference_ability))
#    test_dict[component.object_id] = component
#
#for key in APPARENT_X.first_order_component_data:
#    print("{}: {} | {}".format(key, APPARENT_X.first_order_component_data[key], test_dict[key]))
