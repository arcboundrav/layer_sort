from object_config import *

has_hexproof_predicate = HasKeywordAbility(keyword_ability_type=KWAHexproof)
has_indestructible_predicate = HasKeywordAbility(keyword_ability_type=KWAIndestructible)

# Scenario 1 #
# Urborg, Tomb of Yawgmoth is put onto the battlefield under p0's control.
urborg = UrborgTombOfYawgmoth(controller=p0)
display([urborg])

# Before coming into play, Urborg does not have any land types nor the associated
# intrinsic mana abilities.
assert not(SwampManaAbility() in urborg.abilities)
assert urborg.subtypes == set([])

ZH.zone_battlefield.add_object(urborg)
snapshot()
display([urborg])

# Outcome #
# Urborg, Tomb of Yawgmoth grants itself the land type "swamp" and the associated
# intrinsic mana activated ability: "{T}: Add {B}."
assert (SwampManaAbility() in urborg.abilities)
assert urborg.subtypes == set(["swamp"])


# Urborg, Tomb of Yawgmoth's controller resolve Heroic Intervention.
heroic_intervention = HeroicIntervention(controller=p0)
resolve_effects(heroic_intervention)
snapshot()
display([urborg])


# Outcome #
# Urborg, Tomb of Yawgmoth gains Hexproof and Indestructible until end of turn.
assert has_hexproof_predicate.value_test(urborg)
assert has_indestructible_predicate.value_test(urborg)


# Blood Moon is put onto the battlefield under p1's control.
blood_moon = BloodMoon(controller=p1)
ZH.zone_battlefield.add_object(blood_moon)
snapshot()
display([urborg, blood_moon])

# Outcome #
# Blood Moon's static ability generates an effect with a component which sets the landtype of
# Urborg, Yawgmoth's Tomb to a specific value, namely, Mountain.
# This removes all of Urborg's intrinsic abilities, meaning that it no longer turns itself
# into a Swamp with the "{T}: Add {B}" mana activated ability. Instead, it is a Mountain with
# the "{T}: Add {R}" mana activated ability intrinsic to Mountains.
# 305.7 is obeyed; the abilities granted to Urborg by Heroic Intervention's effect remain.
assert not(SwampManaAbility() in urborg.abilities)
assert (MountainManaAbility() in urborg.abilities)
assert urborg.subtypes == set(["mountain"])
assert has_hexproof_predicate.value_test(urborg)
assert has_indestructible_predicate.value_test(urborg)


# Scenario 2 #
# Relative timestamp order between Urborg and Blood Moon swapped.
# Because Urborg's effect depends on Blood Moon's effect, it waits to apply.
# By the time it is time to apply the ability generating the effect has been removed, so
# there's nothing to apply.

# Cause Heroic Intervention's effect to expire.
EVENT_HANDLER.broadcast_event(UntilEndOfTurnEvent())
snapshot()

assert not(has_hexproof_predicate.value_test(urborg))
assert not(has_indestructible_predicate.value_test(urborg))


# Remove Urborg from the battlefield.
ZH.zone_battlefield.remove_specific_object_(urborg)

# Put Urborg back onto the battlefield under p0's control.
ZH.zone_battlefield.add_object(urborg)

# Resolve Heroic Intervention again so its effect applies to Urborg again.
resolve_effects(heroic_intervention)
snapshot()
display([urborg, blood_moon])

# Outcome #
# Blood Moon's ability generates an effect upon which the effect generated by Urborg's ability
# depends; therefore, it waits to apply, despite having a more recent timestamp.
# By the time it goes to apply, it no longer exists because Blood Moon's ability generates an
# effect which causes Urborg to lose all of its intrinsic mana abilities and its rules text
# abilities. Importantly, the abilities granted by Heroic Intervention remain. In other words,
# the outcome is identical to Scenario 1.
assert not(SwampManaAbility() in urborg.abilities)
assert (MountainManaAbility() in urborg.abilities)
assert urborg.subtypes == set(["mountain"])
assert has_hexproof_predicate.value_test(urborg)
assert has_indestructible_predicate.value_test(urborg)
